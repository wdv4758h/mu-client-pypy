================================================================================

                          General Notes and Questions

================================================================================
# There seem to be references to undefined class members (see AbstractLLCPU)
    -- possilbe meta-programming involved?
# I'm having trouble tracing the bridge between pypy interpreter and jit
    -- Hard to track types of arguments
# Finding the environment that is passed to JIT - for example, do we pass a
    frame object?

================================================================================

                                     Terms

================================================================================
* Model (such as jit/backend/model.py
* Terminoligy docd in questions.txt
* PREFIX bh_ in jit/backend/llsupport/llmodel.py
    -- maybe 'basic handle'?
*

================================================================================
                                    Classes
================================================================================

AbstractARMBuilder(object):
    Class: Defined rpython/jit/backend/arm/codebuilder.py:31
    FUNCTIONS
        __init__(self, arch_version=7):
        write32(self, word)
            Passes to writechar()
        writechar(self, char)
            Not implemented error
    NOTES
        Defines basic operations, such as:
            NOP, PUSH, STM, LDM, VSTM, VLDM, VPUSH, VPOP, VMOV_rc, VMOV_cr, 
            VMOV_sc, VMOV_cs, VMOV_cc, ...
    INHERITED BY:
        InstrBuilder
        OverwritingBuilder
        
AbstractARMCPU(AbstractLLCPU):
    Class: Defined rpython/jit/backend/arm/runner.py:19
    FUNCTIONS 
        __init__(self, rtyper, stats, opts=None, translate_support_code=False,
                 gcdescr=None)
        setup(self):
            * sets assembler to AssemblerARM
            
AbstractCPU(object)
    Class: Defined rpython/jit/backend/model.py:11
    FUNCTIONS
        __init__(self): Constructor

        compile_loop(self, inputargs, operations, looptoken, jd_id=0,
            unique_id=0, log=True, name='', logger=None): Not Implemented

        compile_bridge(self, faildescr, inputargs, operations,
            original_loop_token, log=True, logger=None): Not Implemented

        make_execute_token(self, *argtypes):
        
        Several other functions pertaining to loops/bridges/guards/tokens/etc.
        Also, a section of lltype specific operations, starting with bh_ prefix


AbstractLLCPU(AbstractCPU):
    Class: Defined rpython/jit/backend/llsupport/llmodel.py:24
    FUNCTIONS:
        compile_loop(self, inputargs, operations,looptoken,jd_id=0,
                     unique_id=0, log=True, name='', logger=None):
    References self.assembler but cannot find it in class or super
    -- SOLVED: Defined by subclass: AbstractARMCPU(AbstractLLCPU)

    INHERITED BY 

ARMCallbuilder(AbstractCallBuilder):
    Class: Defined rpython/jit/backend/arm/callbuilder.py
    FUNCTIONS:

        __init__(self, assembler, fnloc, arglocs, resloc=r.r0, restype=INT, 
                ressize=WORD, ressigned=True):  Constructor

ARMFrameManager(FrameManager):
    Class: Defined rpython/jit/backend/arm/regalloc.py:62

ARMRegisterManager(RegisterManager):
    Class: Defined rpython/jit/backend/arm/regalloc.py:86


        
ArmGuardToken(GuardToken):
    Class: Defined rpython/jit/backend/arm/opassembler.py:36

AssemblerARM(ResOpAssembler):
    Class: Defined rpython/jit/backend/arm/assembler.py:33

    FUNCTIONS:
        _walk_operations(self, inputargs,operations,regalloc):
            Defined:1000
            
    VARIABLES:
        self.mc
            DEFINED: __init__():41 - None
            DEFINED: setup():64    - InstrBuilder(self.cpu.cpuinfo.arch_version)
            mc is short for machine code (?)
        self.cpu
            INHERITED: BaseAssembler



AssemblerLocation(object):
    Class: Defined rpython/jit/backend/arm/locations.py:4

BaseAssembler(object):
    Class: Defined rpython/jit/backend/llsupport/assembler.py:67:
    FUNCTIONS
        __init__( self, cpu, translate_support_code=False )
    INHERITED BY
        * ResOpAssembler

BlockBuilderMixin(object):
    Class: Defined rpython/jit/backend/llsupport/asmmemmgr.py:200

    # A base class to generate assembler.  It is equivalent to just a list
    # of chars, but it is potentially more efficient for that usage.
    # It works by allocating the assembler SUBBLOCK_SIZE bytes at a time.
    # Ideally, this number should be a power of two that fits the GC's most
    # compact allocation scheme (which is so far 35 * WORD for minimark.py).

    FUNCTIONS:
        __init__(self, translated=None)
        init_block_builder(self)
        _make_new_subblock(self)
        writechar(self, char)
        overwrite(self,index,char)
        overwrite32(self,index,val)
        get_relative_pos(self)
        copy_to_raw_memory(self, addr)
        _copy_to_raw_memory(self, addr)
        _dump(self,addr,logname,backend-None)
        materialize(self,cpu,allblocks,gcrootmap=None)
        _become_a_plain_block_builder(self)
        insert_gcroot_marker(self,mark)

    INHERITED BY:
        InstrBuilder

CompiledLoopToken(object):
    Class: Defined rpython/jit/backend/model.py:286
    FUNCTIONS
        __init__(self, cpu, number)
        compiling_a_bridge(self)
        update_frame_info(self,oldlooptoken,baseofs)
        __del__(self)

CoreRegisterManager(ARMRegisterManager):
    Class: Defined rpython/jit/backend/arm/regalloc.py:138
    FUNCTIONS
        __init__(self, longevity, frame_manager=None, assembler=None)
        call_result_location(self, v)
        convert_to_imm(self, c)
        get_scratch_reg(self, type=INT, forbidden_vars=[], selected_reg=None)
        get_free_reg(self)

ConstFloatLoc(AssemblerLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:98
    FUNCTIONS:
        __init__(self, value)
        getint(self)
        __repr__(self)
        is_imm_float(self)
        as_key(self)
        is_float(self)

CPU_ARM(AbstractARMCPU):
    Class: Defined rpython/jit/backend/arm/runner.py:110
    VARIABLES:
        backend_name = "arm"

CPUINFO(object):
    Class: Defined rpython/jit/backend/arm/runner.py:14
    Details info about assembler

HardFloatCallBuilder(ARMCallbuilder):
    Class: Defined rpython/jit/backend/arm/callbuilder.py:324
    FUNCTIONS:
        get_next_vfp(self, tp)
        prepare_arguments(self)
        load_result(self)
        get_result_locs(self)

ImmLocation(AssemblerLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:81

InstrBuilder(BlockBuilderMixin, AbstractARMBuilder):
    Class: Defined rpython/jit/backend/arm/codebuilder.py:439
    FUNCTIONS:
        __init__(self, arch_version=7):
            Passes arch_version to AbstractARMAssembler.__init__
    VARIABLES:
        ops_offset = {}

OverwritingBuilder(AbstractARMBuilder):
    Class: Defined rpython/jit/backend/arm/codebuilder.py:423
    FUNCTIONS:
        __init__(self, cb, start, size)
        currpos(self)
        writechar(self,char)

    VARIABLES:
        self.cb = cb (code builder?)
        self.index = start
        self.end = start + size

RawSPStackLocation(AssemblerLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:156

Regalloc(BaseRegalloc):
    Class: Defined rpython/jit/backend/arm/regalloc.py:180

RegisterLocation(object):
    Class: Defined rpython/jit/backend/arm/locations.py:35

ResOpAssembler(BaseAssembler):
    Class: Defined rpython/jit/backend/arm/opassembler.py:45

    METHODS
        emit_op_*
        build_guard_token(self, op, frame_depth, arglocs, offset, fcond):
        _call_assembler_*(self, ...)
         
    NOTES
        This class is packed with a bunch of emit_* functions. This is what
        we want to recreate for Mu.

        Presented with JitOp -> Machine Dependent Code

        TODO:
            The emit methods have signatures of form
                emit_op_*(self, op, arglocs, regalloc, fcond)
            Want to find what kind of objects each of these are.
                
SoftCloatCallBuilder(ARMCallbuilder):
    Class: Defined rpython/jit/backend/arm/callbuilder.py:220

StackLocation(AssemblerLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:123

SVFPRegisterLocation(VFPRegisterLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:72

TempFloat(TempVar):
    Class: Defined rpython/jit/backend/arm/regalloc.py:54

TempInt(TempVar):
    Class: Defined rpython/jit/backend/arm/regalloc.py:40

TempPtr(TempVar):
    Class: Defined rpython/jit/backend/arm/regalloc.py47
    
VFRegisterLocation(RegisterLocation):
    Class: Defined rpython/jit/backend/arm/locations.py:52

VFPRegisterManager(ARMRegisterManager):
    Class: Defined rpython/jit/backend/arm/regalloc.py:107

================================================================================
                             Functions and Methods
================================================================================

write32: 
    method of AbstractARMBuilder:rpython/jit/backend/arm/codebuilder.py:31
    defined @ line 370
    Writes 32 bit word in little endian (?)


================================================================================
                                    BYTE OPS
================================================================================

Location:
    rpython/flowspace/flowcontext.py:
        Defines tuples of ("OP_NAME", op.operation), where op is the import of
        rpython/flowspace/operations.py
    rpython/flowspace/operations.py:
        
    rpython/jit/codewriter/support.py:
        744: operation_name, args = ll_func.oopspec.split('(', 1) is in
        function:

        def pars_oopspec(fnobj):

        This function is not called anywhere but by itself. Not sure what fnobj
        is.
