Notes on llsupport/regalloc.py and derived classes from ARM
===============================================================================
                                Inheritence Tree
===============================================================================
                                RegisterManager
                                       |
                                       v
                               ARMRegisterManager
                       ________________/\______________
                       |                              |
                       v                              v
                VFPRegisterManager          CoreRegisterManager


-------------------------------------------------------------------------------

                                  BaseRegalloc
                                       |
                                       v
                                    Regalloc

-------------------------------------------------------------------------------

                                 AbstractValue
                      _________________/\_________________
                      |                                  |
                      v                                  v
                   TempVar                              Const
                   /  |  \                             /  |  \  
          ________/   |   \________           ________/   |   \_______
          |           |           |           |           |           |
          v           v           v           v           v           v
       TempInt    TempPtr    TempFloat    ConstInt   ConstFloat   ConstPtr

-------------------------------------------------------------------------------

    
================================================================================
                           class BaseRegalloc(object)
               defined rpython/jit/backend/llsupport/regalloc.py:628
    """ Base class on which all the backend regallocs should be based
    """
================================================================================

FUNCTIONS
    def _set_initial_bindings(self, inputargs, looptoken):
        """ Set the bindings at the start of the loop
        """
    def next_op_can_accept_cc(self, operations, i):
    def locs_for_call_assembler(self, op):

================================================================================
                         class RegisterManager(object)
             defined rpython/jit/backend/llsupport/regalloc.py:269
================================================================================
VARS:

    # Defined at class level (outside init)
    box_types             = None        # Defined in inherited class
    all_regs              = []          # [RegisterLocation]
    no_lower_byte_regs    = []          # [RegisterLocation]
        # We won't have to use this (I don't believe) in the MuVM
    save_around_call_regs = []          # [RegisterLocation]
    frame_reg             = None        # RegisterLocation

    # Defined in __init__()
    self.free_regs = self.all_regs[:]   # [RegisterLocation]
    self.longevity = longevity          # type = { AbstractValue -> (Int,Int) }
        # All versions of longevity I've found so far have mapped
        # InputArgInts to (Int,Int) tuples. InputArgInts are regulary called
        # boxes and inherit from both AbstractValue class and IntOp class

    self.temp_boxes = []                # [TempVar]

    self.reg_bindings = {}              # OrderedDict if available
        # Maps Boxes to RegisterLocation. 
        # TODO find exactly what Boxes are in this case

    self.bindings_to_frame_reg = {}     # 
    self.position = -1                  # Int - ?
    self.frame_manager = frame_manager  # 
    self.assembler = assembler          #

FUNCTIONS:

    # 279
    def __init__(self, longevity, frame_manager=None, assembler=None):
        Default Constructor

    # 293
    def is_still_alive(self, v):
        (v) -> bool

    def stays_alive(self, v):
        (v) -> bool

    def next_instruction(self, incr=1):
        (int) -> None

    def _check_type(self, v):
        (Any) -> None
        Assert that v is TempVar OR is in box_types
        
    def possibly_free_var(self, v):
        (Any) -> None
        """ If v is stored in a register and v is not used beyond the
            current position, then free it.  Must be called at some
            point for all variables that might be in registers.
        """

    def possibly_free_vars(self, vars):
        (Any) -> None
        """ Same as 'possibly_free_var', but for all v in vars.
        """

    def possibly_free_vars_for_op(self, op):
        (AbstractResOp) -> None

    def free_temp_vars(self):
        (None) -> (None)

    def _check_invariants(self):
        (None) -> (None)

    def try_allocate_reg(self, v, selected_reg=None, need_lower_byte=False):
        """ Try to allocate a register, if we have one free.
        need_lower_byte - if True, allocate one that has a lower byte reg
                          (e.g. eax has al)
        selected_reg    - if not None, force a specific register

        returns allocated register or None, if not possible.
        """
        (TempVar, Reg?, bool) -> (Int)

    def _spill_var(self, v, forbidden_vars, selected_reg,
                need_lower_byte=False):
        (TempVar, [TempVar], Reg, bool) -> (Reg?)

    def _pick_variable_to_spill(self, v, forbidden_vars, selected_reg=None,
                need_lower_byte=False):
        (TempVar, [TempVar], Reg/None, bool) -> (Reg?)

    def force_allocate_reg(self, v, forbidden_vars=[], selected_reg=None,
                           need_lower_byte=False):
        (TempVar, [TempVar], Reg?, bool) -> (Int?)
        """ Forcibly allocate a register for the new variable v.
        It must not be used so far.  If we don't have a free register,
        spill some other variable, according to algorithm described in
        '_pick_variable_to_spill'.

        Will not spill a variable from 'forbidden_vars'.
        TODO: assert selected_reg = None
        """

    def force_allocate_frame_reg(self, v):
        (TempVar) -> (None)
        """ Allocate the new variable v in the frame register."""

    def force_spill_var(self, var):
        (TempVar) -> (None)

    def loc(self, box, must_exist=False):
        (Const/TempVar??, bool) ->  (RegisterLocation)
        """ Return the location of 'box'.
        """
        
    def return_constant(self, v, forbidden_vars=[], selected_reg=None):
        (Const, [TempVar], Reg) -> (RegisterLocation)
        """ Return the location of the constant v.  If 'selected_reg' is
        not None, it will first load its value into this register.

        In Mu: give global name -refer directly
        """

    def make_sure_var_in_reg(self, v, forbidden_vars=[], selected_reg=None,
                             need_lower_byte=False):
        (TempVar, [TempVar], Reg?, bool) -> (Int)
        """ Make sure that an already-allocated variable v is in some
        register.  Return the register.  See 'force_allocate_reg' for
        the meaning of the optional arguments.
        """

    def _reallocate_from_to(self, from_v, to_v):
        (TempVar, TempVar) -> (None)

    def _move_variable_away(self, v, prev_loc):
        (TempVar, Int) -> (None)

    def force_result_in_reg(self, result_v, v, forbidden_vars=[]):
        (TempVar, TempVar, [TempVar]) -> (Int?)
        """ Make sure that result is in the same register as v.
        The variable v is copied away if it's further used.  The meaning
        of 'forbidden_vars' is the same as in 'force_allocate_reg'.
        """
    def _sync_var(self, v):
        (TempVar?) -> (None)

    def before_call(self, force_store=[], save_all_regs=0):
        ([], Int) -> (None)
        """ Spill registers before a call, as described by
        'self.save_around_call_regs'.  Registers are not spilled if
        they don't survive past the current operation, unless they
        are listed in 'force_store'.  'save_all_regs' can be 0 (default),
        1 (save all), or 2 (save default+PTRs).
        """
    def after_call(self, v):
        (TempVar?) -> ()
        """ Adjust registers according to the result of the call,
        which is in variable v.
        """
        
    def convert_to_imm(self, c):
        """ Platform specific - convert a constant to imm
        """
    def call_result_location(self, v):
        (TempVar) -> ()?
        """ Platform specific - tell where the result of a call will
        be stored by the cpu, according to the variable type
        """
    def get_scratch_reg(self, type, forbidden_vars=[], selected_reg=None):
        (?, [TempVar], Reg) -> ()?
        """ Platform specific - Allocates a temporary register """

===============================================================================
                   class ARMRegisterManager(RegisterManager)
                 defined rpython/jit/backend/arg/regalloc.py:86
===============================================================================
METHODS:
    def return_constant(self, v, forbidden_vars=[], selected_reg=None):
        # v: TempVar OR in box_types
        # If `v` is a Const: 
        #       convert to immediate value and have assemlber  load it. 
        # Else:
        #       Send to RegisterManager.return_constant

===============================================================================
                  class VFPRegisterManager(ARMRegisterManager)
                 defined rpython/jit/backend/arg/regalloc.py:107
===============================================================================
VARS:
    all_regs                = r.all_vfp_regs
    box_types               = [FLOAT]
    save_around_call_regs   = r.all_vfp_regs

METHODS:
    def convert_to_imm(self, c):

    def __init__(self, longevity, frame_manager=None, assembler=None):

    def after_call(self, v):
        """ Adjust registers according to the result of the call,
        which is in variable v.
        """

    def get_scratch_reg(self, type=FLOAT, forbidden_vars=[], selected_reg=None):

===============================================================================
                  class CoreRegisterManager(ARMRegisterManager)
                 defined rpython/jit/backend/arg/regalloc.py:138
===============================================================================
VARS:
    all_regs = r.all_regs
    box_types = None       # or a list of acceptable types
    no_lower_byte_regs = all_regs
    save_around_call_regs = r.caller_resp
    frame_reg = r.fp

METHODS:
    def __init__(self, longevity, frame_manager=None, assembler=None):

    def call_result_location(self, v):

    def convert_to_imm(self, c):

    def get_scratch_reg(self, type=INT, forbidden_vars=[], selected_reg=None):

    def get_free_reg(self):


===============================================================================
                          class AbstractValue(object)
               defined rpython/jit/metainterp/resoperation.py:27
===============================================================================
VARS:
    _repr_memo      = CountingDict()
    is_info_class   = False
    namespace       = None
    _attrs_         = ()

METHODS:
    def _get_hash_(self):

    def same_box(self, other):

    def same_shape(self, other):

    def repr_short(self, memo):

    def is_constant(self):

    def get_forwarded(self):

    def set_forwarded(self, forwarded_to):

    @specialize.arg(1)
    def get_box_replacement(op, not_const=False):
        # Read the chain "op, op._forwarded, op._forwarded._forwarded..."
        # until we reach None or an Info instance, and return the last
        # item before that.

    def reset_value(self):

    def is_inputarg(self):

    def returns_vector(self):

    def is_vector(self):

    def returns_void(self):


===============================================================================
                           class Const(AbstractValue)
               defined rpython/jit/metainterp/history.py:175
===============================================================================
VARS:
    _attrs_        = ()

METHODS:
    @staticmethod
    def _new(x):
    def constbox(self):

    def same_box(self, other):

    def same_constant(self, other):

    def repr(self, memo):

    def is_constant(self):

    def __repr__(self):





===============================================================================
                             class ConstInt(Const)
               defined rpython/jit/metainterp/history.py:215
===============================================================================
VARS:
    type        = INT
    value       = 0
    _attrs_     = ('value',)
    getvalue    = getint

METHODS:
    def __init__(self, value):

    def getint(self):

    def getaddr(self):

    def _get_hash_(self):

    def same_constant(self, other):

    def nonnull(self):

    def _getrepr_(self):

    def repr_rpython(self):




===============================================================================
                            class ConstFloat(Const):
               defined rpython/jit/metainterp/history.py:256
===============================================================================
    type        = FLOAT
    value       = longlong.ZEROF
    _attrs_     = ('value',)
    getvalue    = getfloatstorage

    def __init__(self, valuestorage):

    @staticmethod
    def fromfloat(x):

    def getfloatstorage(self):

    def getfloat(self):

    def _get_hash_(self):
        return longlong.gethash(self.value)

    def same_constant(self, other):
        if isinstance(other, ConstFloat):
            # careful in this comparison: if self.value and other.value
            # are both NaN, stored as regular floats (i.e. on 64-bit),
            # then just using "==" would say False: two NaNs are always
            # different from each other.  Conversely, "0.0 == -0.0" but
            # they are not the same constant.

    def nonnull(self):

    def _getrepr_(self):

    def repr_rpython(self):

===============================================================================
                           class BaseRegalloc(object)
             defined rpython/jit/backend/llsupport/regalloc.py:628
===============================================================================
DOC_STRING:
    """ Base class on which all the backend regallocs should be based
    """
METHODS:
    def _set_initial_bindings(self, inputargs, looptoken):
        """ Set the bindings at the start of the loop
        """

    def next_op_can_accept_cc(self, operations, i):

    def locs_for_call_assembler(self, op):

===============================================================================
                          class Regalloc(BaseRegalloc)
                defined rpython/jit/backend/arm/regalloc.py:180
===============================================================================

VARS:

# From __init__(self, assembler)
    self.cpu            = assembler.cpu
    self.assembler      = assembler
    self.frame_manager  = None
    self.jump_target_descr  = None
    self.final_mump_op  = None

# Defined in various places (not __init__ or at class level
    ### THE FOLLOWING DEFINED IN _prepare(), line 301
    self.fm = ARMFrameManager(cpu.get_baseofs_of_Frame_field())
    self.frame_manager = self.fm
    self.longevity, self.last_real_usage = compute_vars_longevity(
                inputargs, operations)
    self.vfprm = VFPRegisterManager(longevity, fm, asm)
    self.rm = CoreRegisterManager(longevity, fm, asm)

METHODS:
    def __init__(self, assembler):
        (BaseAssembler) -> ()

    def loc(self, var):
        ( {FLOAT, TempVar} ) -> RegisterLocation
        # returns location of var 

    def position(self):
        () -> Int
        # Returns CoreRegisterManager.position(): Int

    def next_instruction(self):
        () -> ()
        # Register Managers goes to next instruction

    def _check_invariants(self):
        () -> ()
        # self.rm and self.vfprm check their invariants

    def stays_alive(self, v):
        

    def call_result_location(self, v):

    def after_call(self, v):

    def force_allocate_reg(self, var, forbidden_vars=[], selected_reg=None,
                           need_lower_byte=False):

    def force_allocate_reg_or_cc(self, var, forbidden_vars=[]):

    def try_allocate_reg(self, v, selected_reg=None, need_lower_byte=False):

    def possibly_free_var(self, var):

    def possibly_free_vars_for_op(self, op):

    def possibly_free_vars(self, vars):

    def get_scratch_reg(self, type, forbidden_vars=[], selected_reg=None):

    def get_free_reg(self):

    def free_temp_vars(self):

    def make_sure_var_in_reg(self, var, forbidden_vars=[],
                         selected_reg=None, need_lower_byte=False):

    def convert_to_imm(self, value):

    def _prepare(self, inputargs, operations, allgcrefs):

    def prepare_loop(self, inputargs, operations, looptoken, allgcrefs):

    def prepare_bridge(self, inputargs, arglocs, operations, allgcrefs,
                       frame_info):

    def get_final_frame_depth(self):

    def _update_bindings(self, locs, inputargs):

    def get_gcmap(self, forbidden_regs=[], noregs=False):

    def perform_enter_portal_frame(self, op):

    def perform_leave_portal_frame(self, op):

    def perform_extra(self, op, args, fcond):

    def force_spill_var(self, var):

    def before_call(self, force_store=[], save_all_regs=False):

    def _sync_var(self, v):

    def _prepare_op_int_add(self, op, fcond):

    def prepare_op_int_add(self, op, fcond):

    prepare_op_nursery_ptr_increment = prepare_op_int_add

    def _prepare_op_int_sub(self, op, fcond):

    def prepare_op_int_sub(self, op, fcond):

    def prepare_op_int_mul(self, op, fcond):

    def prepare_op_int_force_ge_zero(self, op, fcond):

    def prepare_op_int_signext(self, op, fcond):

    prepare_op_int_floordiv = prepare_op_by_helper_call('int_floordiv')
    prepare_op_int_mod = prepare_op_by_helper_call('int_mod')
    prepare_op_uint_floordiv = prepare_op_by_helper_call('unit_floordiv')

    prepare_op_int_and = prepare_op_ri('int_and')
    prepare_op_int_or = prepare_op_ri('int_or')
    prepare_op_int_xor = prepare_op_ri('int_xor')
    prepare_op_int_lshift = prepare_op_ri('int_lshift', imm_size=0x1F,
                                        allow_zero=False, commutative=False)
    prepare_op_int_rshift = prepare_op_ri('int_rshift', imm_size=0x1F,
                                        allow_zero=False, commutative=False)
    prepare_op_uint_rshift = prepare_op_ri('uint_rshift', imm_size=0x1F,
                                        allow_zero=False, commutative=False)

    prepare_op_int_lt = prepare_int_cmp
    prepare_op_int_le = prepare_int_cmp
    prepare_op_int_eq = prepare_int_cmp
    prepare_op_int_ne = prepare_int_cmp
    prepare_op_int_gt = prepare_int_cmp
    prepare_op_int_ge = prepare_int_cmp

    prepare_op_uint_le = prepare_int_cmp
    prepare_op_uint_gt = prepare_int_cmp

    prepare_op_uint_lt = prepare_int_cmp
    prepare_op_uint_ge = prepare_int_cmp

    prepare_op_ptr_eq = prepare_op_instance_ptr_eq = prepare_op_int_eq
    prepare_op_ptr_ne = prepare_op_instance_ptr_ne = prepare_op_int_ne

    prepare_op_int_add_ovf = prepare_op_int_add
    prepare_op_int_sub_ovf = prepare_op_int_sub
    prepare_op_int_mul_ovf = prepare_op_int_mul

    prepare_op_int_is_true = prepare_unary_cmp
    prepare_op_int_is_zero = prepare_unary_cmp

    prepare_op_int_neg = prepare_unary_op
    prepare_op_int_invert = prepare_unary_op

    def _prepare_op_call(self, op, fcond):

    prepare_op_call_i = _prepare_op_call
    prepare_op_call_r = _prepare_op_call
    prepare_op_call_f = _prepare_op_call
    prepare_op_call_n = _prepare_op_call

    def _prepare_call(self, op, force_store=[], save_all_regs=False,
                      first_arg_index=1):

    def _call(self, op, arglocs, force_store=[], save_all_regs=False):

    def prepare_op_call_malloc_gc(self, op, fcond):
        return self._prepare_call(op)

    def _prepare_llong_binop_xx(self, op, fcond):

    def _prepare_llong_to_int(self, op, fcond):

    def _prepare_threadlocalref_get(self, op, fcond):

    def _prepare_guard(self, op, args=None):

    def prepare_op_finish(self, op, fcond):
        # the frame is in fp, but we have to point where in the frame is
        # the potential argument to FINISH

    def load_condition_into_cc(self, box):

    def _prepare_guard_cc(self, op, fcond):

    prepare_op_guard_true = _prepare_guard_cc
    prepare_op_guard_false = _prepare_guard_cc
    prepare_op_guard_nonnull = _prepare_guard_cc
    prepare_op_guard_isnull = _prepare_guard_cc

    def prepare_op_guard_value(self, op, fcond):

    def prepare_op_guard_no_overflow(self, op, fcond):

    prepare_op_guard_overflow = prepare_op_guard_no_overflow
    prepare_op_guard_not_invalidated = prepare_op_guard_no_overflow
    prepare_op_guard_not_forced = prepare_op_guard_no_overflow

    def prepare_op_guard_exception(self, op, fcond):

    def prepare_op_save_exception(self, op, fcond):

    prepare_op_save_exc_class = prepare_op_save_exception

    def prepare_op_restore_exception(self, op, fcond):

    def prepare_op_guard_no_exception(self, op, fcond):

    def prepare_op_guard_class(self, op, fcond):

    prepare_op_guard_nonnull_class = prepare_op_guard_class
    prepare_op_guard_gc_type = prepare_op_guard_class
    prepare_op_guard_subclass = prepare_op_guard_class

    def prepare_op_guard_is_object(self, op, fcond):

    def compute_hint_frame_locations(self, operations):
        # optimization only: fill in the 'hint_frame_locations' dictionary
        # of rm and xrm based on the JUMP at the end of the loop, by looking
        # at where we would like the boxes to be after the jump.

    def _compute_hint_frame_locations_from_descr(self, descr):

    def prepare_op_jump(self, op, fcond):

    def prepare_op_gc_store(self, op, fcond):

    def _prepare_op_gc_load(self, op, fcond):

    prepare_op_gc_load_i = _prepare_op_gc_load
    prepare_op_gc_load_r = _prepare_op_gc_load
    prepare_op_gc_load_f = _prepare_op_gc_load

    def prepare_op_increment_debug_counter(self, op, fcond):

    def prepare_op_gc_store_indexed(self, op, fcond):

    def _prepare_op_gc_load_indexed(self, op, fcond):

    prepare_op_gc_load_indexed_i = _prepare_op_gc_load_indexed
    prepare_op_gc_load_indexed_r = _prepare_op_gc_load_indexed
    prepare_op_gc_load_indexed_f = _prepare_op_gc_load_indexed

    prepare_op_copystrcontent = void
    prepare_op_copyunicodecontent = void
    prepare_op_zero_array = void

    def _prepare_op_same_as(self, op, fcond):

    prepare_op_cast_ptr_to_int = _prepare_op_same_as
    prepare_op_cast_int_to_ptr = _prepare_op_same_as
    prepare_op_same_as_i = _prepare_op_same_as
    prepare_op_same_as_r = _prepare_op_same_as
    prepare_op_same_as_f = _prepare_op_same_as

    def prepare_op_load_from_gc_table(self, op, fcond):

    def prepare_op_call_malloc_nursery(self, op, fcond):

    def prepare_op_call_malloc_nursery_varsize_frame(self, op, fcond):

    def prepare_op_call_malloc_nursery_varsize(self, op, fcond):

    prepare_op_debug_merge_point = void
    prepare_op_jit_debug = void
    prepare_op_keepalive = void
    prepare_op_enter_portal_frame = void
    prepare_op_leave_portal_frame = void

    def prepare_op_cond_call_gc_wb(self, op, fcond):
        # we force all arguments in a reg because it will be needed anyway by
        # the following gc_store. It avoids loading it twice from the memory.

    prepare_op_cond_call_gc_wb_array = prepare_op_cond_call_gc_wb

    def prepare_op_cond_call(self, op, fcond):

    def prepare_op_force_token(self, op, fcond):
        # XXX for now we return a regular reg

    def prepare_op_label(self, op, fcond):

    def prepare_op_guard_not_forced_2(self, op, fcond):

    def _prepare_op_call_may_force(self, op, fcond):

    prepare_op_call_may_force_i = _prepare_op_call_may_force
    prepare_op_call_may_force_r = _prepare_op_call_may_force
    prepare_op_call_may_force_f = _prepare_op_call_may_force
    prepare_op_call_may_force_n = _prepare_op_call_may_force

    def _prepare_op_call_release_gil(self, op, fcond):

    prepare_op_call_release_gil_i = _prepare_op_call_release_gil
    prepare_op_call_release_gil_f = _prepare_op_call_release_gil
    prepare_op_call_release_gil_n = _prepare_op_call_release_gil

    def _prepare_op_call_assembler(self, op, fcond):

    prepare_op_call_assembler_i = _prepare_op_call_assembler
    prepare_op_call_assembler_r = _prepare_op_call_assembler
    prepare_op_call_assembler_f = _prepare_op_call_assembler
    prepare_op_call_assembler_n = _prepare_op_call_assembler

    prepare_op_float_add = prepare_two_regs_op
    prepare_op_float_sub = prepare_two_regs_op
    prepare_op_float_mul = prepare_two_regs_op
    prepare_op_float_truediv = prepare_two_regs_op
    prepare_op_float_lt = prepare_float_cmp
    prepare_op_float_le = prepare_float_cmp
    prepare_op_float_eq = prepare_float_cmp
    prepare_op_float_ne = prepare_float_cmp
    prepare_op_float_gt = prepare_float_cmp
    prepare_op_float_ge = prepare_float_cmp
    prepare_op_float_neg = prepare_unary_op
    prepare_op_float_abs = prepare_unary_op

    def _prepare_op_math_sqrt(self, op, fcond):

    def prepare_op_cast_float_to_int(self, op, fcond):

    def prepare_op_cast_int_to_float(self, op, fcond):

    def prepare_force_spill(self, op, fcond):

    prepare_op_convert_float_bytes_to_longlong = prepare_unary_op
    prepare_op_convert_longlong_bytes_to_float = prepare_unary_op

    #def prepare_op_read_timestamp(self, op, fcond):
    #    loc = self.get_scratch_reg(INT)
    #    res = self.vfprm.force_allocate_reg(op)
    #    return [loc, res]

    def prepare_op_cast_float_to_singlefloat(self, op, fcond):

    def prepare_op_cast_singlefloat_to_float(self, op, fcond):


